#!/bin/sh
#
#  Copyright (c) 2022: Jacob.Lundqvist@gmail.com
#  License: MIT
#
#  Part of https://github.com/jaclu/spd
#
#  Who said you couldn't do nested arrays in POSIX ??
#
version="0.5.0  2022-05-31"



#
#  When defining built in package groups, each group should be in
#  the following overall notation, but indentation is off no significance,
#  I just want it orderly to my taste here :)
#
#    :label   | pkg1 pkg2 \
#               pkg3
#
#  Additional white space and empty lines are disregarded,
#  so you can align it as you please.
#  For the package lists, use \ for continuation on next line
#
package_groups="

  :bash           |  bash bash-doc checkbashisms git-bash-completion \
                     util-linux-bash-completion openrc-bash-completion \
                     py3-pip-bash-completion

  :zsh            |  zsh zsh-doc cvs-zsh-completion fd-zsh-completion \
                     git-zsh-completion openrc-zsh-completion \
                     rsync-zsh-completion tmux-zsh-completion \
                     zsh-syntax-highlighting zsh-vcs

  :editors        |  emacs-nox vim neovim

  :man            |  man-db man-pages coreutils-doc tmux-doc

  :python         |  py3-pip python3-doc py3-flake8  py3-pyflakes py3-pylint py3-pytest py3-wheel

  :go             |  go go-doc

  :devel          |  build-base ncurses-dev

  :sessions       |  dvtm dvtm-doc abduco

  :remote_access  |  mosh

"

# check if devel auto installs the following: ncurses-libs ncurses-terminfo ncurses-terminfo-base pkgconf




prog_name=$(basename "$0")

#
#  By only displaying actions on other OS
#  I can edit this on my workstation
#
if [ -d "/proc/ish" ]; then
    is_iSH=1
else
    is_iSH=0
fi


check_for_option() {
    case "$1" in

        "" | "-h" | "--help" )
            echo "usage: $prog_name [-h] | [-g] | [-l] | group1 group2 -group3 ..."
            echo
            echo "This is a tool to install/uninstall groups of packages"
            echo "prefixing a group name with - means uninstall that group"
            echo
            echo "If not run on iSH, this will only display what actions"
            echo "would be taken, so can be tested on other operating systems"
            echo
            echo "options:"
            echo "  -h, --help     show this help message and exit"
            echo "  -g             list available groups and exit"
            echo "  -l             list groups and items and exit"
            exit 0
            ;;

        "-g" )
            task="groups"
            process_items
            echo
            exit 0
            ;;

        "-l" )
            task="list"
            process_items
            exit 0
            ;;

    esac
}


pkg_handling() {
    action="$1"
    case "$action" in

        "add" | "del" ) ;;

        *)
            echo "ERROR: pkg_handling() - incorrect param: $action"
            exit 1
    esac

    cmd="sudo apk $action $packages"

    if [ "$is_iSH" -eq 1 ]; then
        $cmd
    else
        #
        #  Allows me to edit this on my Workstation :)
        #
        echo "** Would run **  $cmd"
    fi
    task_done=1
}


#
#  Loops through all groups, and takes action according to $task
#  for install / uninstall $item is assumed to be the group to be
#  processed
#
process_items() {
    task_done=0
    lst=$package_groups  # since we might come back, dont change the original :)
    while true; do
        # POSIX way to handle array types of data
        section="${lst%%:*}"  # up to first colon excluding it
        lst="${lst#*:}"       # after fist colon

        name="$(echo     "$section" | cut -d'|' -f 1| awk '{$1=$1};1' | tr '[:upper:]' '[:lower:]')"
        packages="$(echo "$section" | cut -d'|' -f 2| awk '{$1=$1};1')"

        [ -z "$name" ] && continue  # skip blank lines

        case "$task" in

            "groups") printf "%s" "$name " ;;

            "list")
                #
                #  For pretty prining, first get all the group names
                #  and figure out the longest. To keep code simple
                #  this is done on the first run of list,
                #
                if [ -z "$max_len" ]; then
                    # first get a list of names, in order to find longest
                    task="groups"
                    group_lst="$(process_items)"
                    task="list" # back to expected processing

                    max_len=0
                    while true; do
                        g="${group_lst%% *}"
                        group_lst="${group_lst#* }"

                        g_len="${#g}"
                        [ "$g_len" -gt $max_len ] && max_len="$g_len"

                        [ "$group_lst" = "$g" ] && break  # list done
                    done
                fi
                printf "[%${max_len}s]  %s\n" "$name" "$packages"
                ;;

            "install")
                if [ "$name" = "$item" ]; then
                    pkg_handling add
                    return
                fi
                ;;

            "uninstall")
                if [ "$name" = "$item" ]; then
                    pkg_handling del
                    return
                fi
                ;;

        esac
        [ "$lst" = "$section" ] && break  # we have processed last group
    done
}


main() {
    echo "$prog_name  $version"

    check_for_option "$1"

    while [ -n "$1" ]; do
        item="$1"
        if [ "$(echo "$item" | cut -b1)" = "-" ]; then
            item="${item#?}"
            task="uninstall"
            echo "-----   Removing group:    $item"
            process_items
        else
            task="install"
            echo "-----   Installing group:  $item"
            process_items
        fi
        if [ "$task_done" -eq 0 ]; then
            echo "ERROR: $item is not a valid group!"
            exit 1
        fi
        shift
    done
}


main "$@"
